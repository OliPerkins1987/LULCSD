teg <- run_mod(sd.mod)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
i
x@run$first_step <- x@run$step
### update outputs
x@outputs <- lapply(x@outputs, get_output, x)
x@run$step <- x@run$step + 1
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
i
x@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.05, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 2020), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
x
x@stocks
s_key <- data.frame(s_type = c('stock', 'stock'), s_name = c('s_soybean', 's_forest'), s_family = c('cropland', 'forest'),
s_id = c('s1','s2'), s_flow_out = c('s_soybean', 's_soybean, s_forest'), s_flow_in = c('i_soybean_demand', ''),
s_parameters = c('s_area, s_yield, s_price', 's_area'), s_internal_pars = c('', ''))
f_key <- data.frame(f_type = c('flow', 'flow'), f_name = c('f_deforest', 'f_produce_soy'), f_id = c('f1', 'f2'),
f_from_stocks = c('s_soybean, s_forest', 's_soybean, i_soybean_demand'), f_to_stocks = c('s_soybean, s_forest', 's_soybean'),
f_function = c('deforest', 'produce_soy'))
i_key <- data.frame(i_type = c('input'), i_name = c('i_soybean_demand'), i_id = c('i1'), i_to = c('s_soybean'),
i_dat_type = c('non_spat'))
o_key <- data.frame(o_type = c('output', 'output', 'output'), o_name = c('soybean_area', 'forest_area', 'soybean_price'), o_id = c('o1', 'o2', 'o3'), o_from_stocks = c('s_soybean', 's_forest', 's_soybean'), o_from_var = c('area', 'area', 'price'))
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(10000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.05, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 2020), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
x@stocks
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
x@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 2020), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x
x@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 2020), load_stock_dat = F)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
x@stocks
s_key <- data.frame(s_type = c('stock', 'stock'), s_name = c('s_soybean', 's_forest'), s_family = c('cropland', 'forest'),
s_id = c('s1','s2'), s_flow_out = c('s_soybean', 's_soybean, s_forest'), s_flow_in = c('i_soybean_demand', ''),
s_parameters = c('area, yield, price', 'area'), s_internal_pars = c('', ''))
f_key <- data.frame(f_type = c('flow', 'flow'), f_name = c('f_deforest', 'f_produce_soy'), f_id = c('f1', 'f2'),
f_from_stocks = c('s_soybean, s_forest', 's_soybean, i_soybean_demand'), f_to_stocks = c('s_soybean, s_forest', 's_soybean'),
f_function = c('deforest', 'produce_soy'))
i_key <- data.frame(i_type = c('input'), i_name = c('i_soybean_demand'), i_id = c('i1'), i_to = c('s_soybean'),
i_dat_type = c('non_spat'))
o_key <- data.frame(o_type = c('output', 'output', 'output'), o_name = c('soybean_area', 'forest_area', 'soybean_price'), o_id = c('o1', 'o2', 'o3'), o_from_stocks = c('s_soybean', 's_forest', 's_soybean'), o_from_var = c('area', 'area', 'price'))
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(10000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 2020), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
x@run$first_step <- x@run$step
### update outputs
x@outputs <- lapply(x@outputs, get_output, x)
x@outputs
x@run$step <- x@run$step + 1
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
### update stock pars
x@stocks <- lapply(x@stocks, update_internal_par, x)
for(i in 1:length(x@flows)) {
### get
if(class(x@flows[[i]])[1] == 'family_flow') {
x@flows[[i]]<- get_ff_args(x@flows[[i]], x, parse_args = F)
} else {
x@flows[[i]]<- get_flow_args(x@flows[[i]], x, parse_args = F)
}
### run
x@flows[[i]]<- run_flow(x@flows[[i]])
### set
if(class(x@flows[[i]])[1] == 'family_flow') {
x <- set_ff_output(x@flows[[i]], x)
} else {
x <- set_flow_output(x@flows[[i]], x)
}
}
i
x@flows[[2]]
x@stocks[[1]]
x@flows[[2]]
ssb <- x@stocks[[1]]@s_parameters
ssb$yield * ssb$area
ssb$production <- ssb$yield * ssb$area
ssb$price
p_price_update <- 0.01
x@inputs[[1]]
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
x@inputs@
x@inputs[[1]]@i_current_val
View(update_input)
x <- sd.mod
### update inputs
x@inputs <- lapply(x@inputs, update_input, x)
x@inputs
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
teg <- run_mod(sd.mod)
warnings()
teg@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
teg <- run_mod(sd.mod)
teg@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.00005, p_price_update= 0.0001), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
teg <- run_mod(sd.mod)
teg@stocks
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.001), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
sd.mod
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
teg@stocks
teg@outputs
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(1000, 10000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
sd.mod@outputs
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(10000, 100000, 2, 450))
```
Now initialise the model and read flows
```
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
```
sd.mod <- run_mod(sd.mod)
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(10000, 100000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.01), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
sd.mod@outputs
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.001), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
sd.mod@outputs
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(10000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0001, p_price_update= 0.001), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
plot(unlist(sd.mod@outputs[[1]]@o_outputs), unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
plot(unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[3]]@o_outputs))
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(1000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0001, p_price_update= 0.005), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
plot(unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[3]]@o_outputs))
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(1000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0001, p_price_update= 0.005), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
sd.mod@stocks[[1]]
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.001, p_price_update= 0.005), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
```
sd.mod <- run_mod(sd.mod)
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.001, p_price_update= 0.005), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
sd.mod@stocks[[1]]
plot(unlist(sd.mod@outputs[[3]]@o_outputs))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.001, p_price_update= 0.05), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[3]]@o_outputs))
plot(unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0001, p_price_update= 0.05), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.05), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
plot(unlist(sd.mod@outputs[[2]]@o_outputs))
plot(unlist(sd.mod@outputs[[3]]@o_outputs))
devtools::document()
library(devtools)
library(rhapsody)
devtools::document()
devtools::document()
usethis::use_vignette('model')
library(devtools)
library(rhapsody)
devtools::document()
s_key <- data.frame(s_type = c('stock', 'stock'), s_name = c('s_soybean', 's_forest'), s_family = c('cropland', 'forest'),
s_id = c('s1','s2'), s_flow_out = c('s_soybean', 's_soybean, s_forest'), s_flow_in = c('i_soybean_demand', ''),
s_parameters = c('area, yield, price', 'area'), s_internal_pars = c('', ''))
f_key <- data.frame(f_type = c('flow', 'flow'), f_name = c('f_deforest', 'f_produce_soy'), f_id = c('f1', 'f2'),
f_from_stocks = c('s_soybean, s_forest', 's_soybean, i_soybean_demand'), f_to_stocks = c('s_soybean, s_forest', 's_soybean'),
f_function = c('deforest', 'produce_soy'))
i_key <- data.frame(i_type = c('input'), i_name = c('i_soybean_demand'), i_id = c('i1'), i_to = c('s_soybean'),
i_dat_type = c('non_spat'))
o_key <- data.frame(o_type = c('output', 'output', 'output'), o_name = c('soybean_area', 'forest_area', 'soybean_price'), o_id = c('o1', 'o2', 'o3'), o_from_stocks = c('s_soybean', 's_forest', 's_soybean'), o_from_var = c('area', 'area', 'price'))
start_vals <- data.frame(Object = c('s_soybean', 's_forest', 's_soybean', 's_soybean'), Parameter = c('area', 'area', 'yield', 'price'),
Value = c(1000, 1000000, 2, 450))
sd.mod <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key, path = paste0(getwd(), '/data')), outputs_from_key(o_key),
parameter_list = list(p_land_trans = 0.0005, p_price_update= 0.05), initial_stock_vals = start_vals,
run = list(nsteps = 31, step = 1990), load_stock_dat = F)
source(paste0(getwd(), '/data/example_flows.R'))
sd.mod <- run_mod(sd.mod)
plot(unlist(sd.mod@outputs[[1]]@o_outputs))
devtools::build_rmd("vignettes/model.Rmd")
devtools::build_rmd("vignettes/model.Rmd")
devtools::build_rmd("vignettes/model.Rmd")
library(tidyverse)
library(devtools)
devtools::load_all("C:/Users/Oli/Documents/GitHub/LULCSD")
setwd('C:/Users/Oli/Documents/Freelance work/DEFRA/OP_Mod/Scenarios/')
Scenario <- 'A1'
library(here)
setwd(paste0(here(), '/',Scenario))
s_key  <- read.csv('Stocks.csv', fileEncoding="UTF-8-BOM")
f_key  <- read.csv('Flows.csv', fileEncoding="UTF-8-BOM")
i_key  <- read.csv('Inputs.csv', fileEncoding="UTF-8-BOM")
o_key  <- read.csv('Outputs.csv', fileEncoding="UTF-8-BOM")
start_vals <- read.csv('Initial_parameters.csv', fileEncoding="UTF-8-BOM")
setwd(paste0(here(),'/', Scenario, '/flows'))
for(i in list.files(pattern = '*.R')) {source(i)}
#####################################################################################################
### set up experiment
#####################################################################################################
setwd(paste0(here(), '/Scenario_data/model_pars'))
Posteriors    <- read.csv('Scenario_posteriors.csv')
Scenario.pars <- read.csv('Scenario_model_pars.csv')
Posteriors    <- Posteriors[Posteriors$Scenario == Scenario, -2]
Scenario.pars <- Scenario.pars[Scenario.pars$Scenario == Scenario, ]
### Scenario specific constants
for(i in 2:ncol(Scenario.pars)) {
Posteriors[colnames(Scenario.pars)[i]] <- Scenario.pars[, i]
}
setwd(paste0(here(), '/Scenario_data/inputs'))
scenario_inputs <- read.csv('scenario_input_key.csv', fileEncoding="UTF-8-BOM")
scenario_inputs <- scenario_inputs[scenario_inputs$Scenario == Scenario, ]
setwd(paste0(here(), '/Scenario_data/stock_pars'))
scenario_stock_pars        <- lapply(list.files(pattern = '*.csv'), read.csv, fileEncoding="UTF-8-BOM")
scenario_stock_pars        <- lapply(scenario_stock_pars, function(z) {z[which(z$Scenario == Scenario), ]})
names(scenario_stock_pars) <- gsub('*.csv', '', list.files(pattern = '*.csv'))
setwd(paste0(here(),'/', Scenario, '/data'))
mod    <- init_model(stocks_from_key(s_key), flows_from_key(f_key),
inputs_from_key(i_key), outputs_from_key(o_key),
initial_stock_vals = start_vals,
list(p_land_trans = 0.002, p_price_weight = 0.02, p_price_weight_forestry = 0.01, p_trade_policy = 2.5,
p_trans_crop_dairy = 0.75, p_urban_growth = 0.01, p_CDR_size = 1.5,
p_size_rate = 0.02, p_age_spread = 10,
p_logging_rate = 0.1, p_planting_rate = 0.03,
p_CDR_uptake_a = 40.4, p_CDR_uptake_b = 0.05, p_behaviour_intercept = 0,
p_max_CDR_delta = 20, p_baseline_tig_update = 0.2, p_tig_beta = 46.2589,
p_biodiversity_price = 15000/30, p_biodiversity_cost = 0.5, p_biodiversity_subsidy = 90,
p_politics_woodland_peat = FALSE, p_politics_woodland_prime = FALSE,
p_politics_biomass_peat  = FALSE, p_politics_biomass_prime  = FALSE),
run = list(nsteps = 31, step = 2020))
e   <- Experiment(mod, Posteriors, start_vals, nrow(Posteriors))
e   <- build_scenario(e, 2020, 2050, inputs = scenario_inputs, stock_pars = scenario_stock_pars,
na.constant = T)
###############################################################################################
### Single parameter run
###############################################################################################
mod <- run_mod(e@mod)
###################
### Plot outputs
###################
setwd(paste0(here(), '/Historical_data'))
####################
### Areas
####################
result <- lapply(mod@outputs[c(27:34)], function(x) {x@o_outputs})
result <- dplyr::bind_rows(lapply(result, function(x) {data.frame(value = unlist(x))}))
result$name <- rep(c('Cereals', 'Veg', 'Dairy', 'Meat', 'Forest','Farm_woodland', 'Biomass', 'Restored_peat'), each = 31)
res.com <- result %>% mutate(Year = rep(2020:2050, times = 8)) %>%
pivot_wider(names_from = name, values_from  = value)
history <- read.csv('Areas.csv', fileEncoding="UTF-8-BOM")
history <- history[7:37, grepl('total', colnames(history))]
colnames(history)    <- gsub('_total', '', colnames(history))
history              <- data.frame(apply(history, 2, zoo::na.approx))
history$Restored_peat<- NA
history <- pivot_longer(history, colnames(history))
result  <- rbind(history, result) %>% mutate(method = rep(c('Observed', 'Modelled'), each = 248))
result %>%
mutate(name = dplyr::recode(name, 'Farm_woodland' = 'farm_trees',  'Restored_peat' = 'peat_rest')) %>%
mutate(Year = c(rep(1990:2020, each = 8), rep(2020:2050, times = 8))) %>%
ggplot(aes(x = Year, y = value, colour= method)) + geom_line(linewidth = 1.25) +
facet_grid(name~., scales = 'free_y') + theme(text= element_text(size=  13)) + ylab('Area (1000ha)')
usethis::use_vignette('experiment')
library(devtools)
library(rhapsody)
devtools::document()
